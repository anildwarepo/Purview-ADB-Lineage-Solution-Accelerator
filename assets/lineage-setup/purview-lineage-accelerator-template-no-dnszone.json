{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.10.61.36676",
        "templateHash": "10199288641664815283"
      }
    },
    "parameters": {
       
      "functionAppName": {
        "type": "string",
        "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function app."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The location into which the resources should be deployed."
        }
      },
     
      "eventHubsNamespaceSku": {
          "type": "string",
          "allowedValues": [ "Basic", "Standard" ],
          "defaultValue": "Standard",
          "metadata": {
              "description": "Specifies the messaging tier for service Bus namespace."
          }
      },
      "eventHubsNamespaceCapacity": {
          "type": "int",
          "allowedValues": [ 1, 2, 4 ],
          "defaultValue": 1,
          "metadata": {
              "description": "Specifies the Messaging Units for a premium namespace."
          }
      },
      "consumerGroupName": {
          "type": "string",
          "defaultValue": "read",
          "metadata": {
              "description": "Specifies the name of a new Consumer Group."
          }
      },
      "eventHubsNamespaceZoneRedundant": {
          "type": "bool",
          "defaultValue": false,
          "metadata": {
              "description": "Enabling this property creates a Event Hubs Namespace in regions that support availability zones."
          }
      },
      "eventHubsNamespacePrivateEndpointName": {
          "type": "string",
          "defaultValue": "EventHubsNamespacePrivateEndpoint",
          "metadata": {
              "description": "Specifies the name of the private link to the storage account."
          }
      },
      "keyvaultPrivateEndpointName": {
          "type": "string",
          "defaultValue": "KeyVaultPrivateEndpoint",
          "metadata": {
              "description": "Specifies the name of the private link to the key vault."
          }
      },
      "functionWorkerRuntime": {
        "type": "string",
        "defaultValue": "dotnet-isolated",
        "allowedValues": [
          "dotnet-isolated",
          "dotnet",
          "node",
          "python",
          "java"
        ],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      "functionPlanOS": {
        "type": "string",
        "defaultValue": "Windows",
        "allowedValues": [
          "Windows",
          "Linux"
        ],
        "metadata": {
          "description": "Specifies the OS used for the Azure Function hosting plan."
        }
      },
      "functionAppPlanSku": {
        "type": "string",
        "defaultValue": "EP1",
        "allowedValues": [
          "EP1",
          "EP2",
          "EP3"
        ],
        "metadata": {
          "description": "Specifies the Azure Function hosting plan SKU."
        }
      },
      "functionAppPlanName": {
        "type": "string",
        "defaultValue": "[format('plan-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function hosting plan."
        }
      },
      "functionStorageAccountName": {
        "type": "string",
        "defaultValue": "[format('st{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the backend Azure storage account used by the Azure Function app."
        }
      },
      "prefixName": {
			  "type": "string",
        "metadata": {
                "description": "prefix value that can be added to resource name strings."
            }            
		  },
      "vnetNameRgName": {
            "type": "String",
            "metadata": {
                "description": "The name of the resource group containing the virtual network for virtual network integration."
            }
      },
      "vnetName": {
        "type": "string",
        "metadata": {
          "description": "The name of the virtual network for virtual network integration."
        }
      },
      "functionSubnetName": {
        "type": "string",
        "metadata": {
          "description": "The name of the virtual network subnet to be associated with the Azure Function app."
        }
      },
      "privateEndpointSubnetName": {
        "type": "string",
        "metadata": {
          "description": "The name of the virtual network subnet used for allocating IP addresses for private endpoints."
        }
      },
     "purviewName": {
			"type": "string",
			"metadata": {
				"description": "existing purview account name"
			}
		  },
      "blobPrivateDNSZoneResourceGroupName": {
			"type": "string",
			"metadata": {
				"description": "Resource group name where privatelink.blob.core.windows.net Private DNS Zone exists"
			}
		},
      "functionPrivateDNSZoneResourceGroupName": {
			"type": "string",
			"metadata": {
				"description": "Resource group name where privatelink.azurewebsites.net Private DNS Zone exists"
			}
		},
      "keyvaultPrivateDNSZoneResourceGroupName": {
			"type": "string",
			"metadata": {
				"description": "Resource group name where privatelink.vaultcore.azure.net Private DNS Zone exists"
			}
		},
      "eventHubPrivateDNSZoneResourceGroupName": {
			"type": "string",
			"metadata": {
				"description": "Resource group name where privatelink.servicebus.windows.net Private DNS Zone exists"
			}
		}
      
    },
    "variables": {
      "paramName": "[parameters('prefixName')]",
      "rgId": "[resourceGroup().id]",
      "uniqueName": "[substring(uniqueString(variables('rgId')),0,4)]",
      "applicationInsightsName": "[format('appi-{0}', uniqueString(resourceGroup().id))]",
      "privateFunctionAppDnsZoneName": "privatelink.azurewebsites.net",
      "privateEndpointFunctionAppName": "[format('{0}-private-endpoint', parameters('functionAppName'))]",
      "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
      "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', parameters('functionStorageAccountName'))]",
      "isReserved": "[if(equals(parameters('functionPlanOS'), 'Linux'), true(), false())]",
      "openlineageKeyVaultName": "[concat('keyvault',variables('uniqueName'))]",
      "EventHubConnectionSecretNameSend": "ehsecretSend",
		  "EventHubConnectionSecretNameListen": "ehsecretListen",
      "clientidkey": "clientIdKey",
		  "clientsecretkey": "clientSecretKey",
      "openlineageEventHubNameSpaceName": "[replace(replace(toLower(concat(concat('eventhubns',variables('paramName')),variables('uniqueName'))),'-',''),'_','')]",
      "openlineageNameEventHubName": "eventhubsplin4tvh",
      "eventHubsNamespaceId": "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]",
      "eventHubsNamespacePrivateEndpointGroupName": "namespace",
      "eventHubsPublicDNSZoneForwarder": "[if(equals(toLower(environment().name), 'azureusgovernment'), '.servicebus.usgovcloudapi.net', '.servicebus.windows.net')]",
      "eventHubsNamespacePrivateDnsZoneName": "[concat('privatelink', variables('eventHubsPublicDNSZoneForwarder'))]",        
      "keyvaultPrivateEndpointGroupName": "vault",
      "keyvaultPrivateDnsZoneName": "privatelink.vaultcore.azure.net"

    },
    "resources": [
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointStorageBlobName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "MyStorageBlobPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId(parameters('blobPrivateDNSZoneResourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]"
        ]
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2022-05-01",
        "name": "[parameters('functionStorageAccountName')]",
        "location": "[parameters('location')]",
        "kind": "StorageV2",
        "sku": {
          "name": "Standard_LRS"
        },
        "properties": {
          "publicNetworkAccess": "Disabled",
          "allowBlobPublicAccess": false,
          "networkAcls": {
            "bypass": "None",
            "defaultAction": "Deny"
          }
        }
      },
      {
        "type": "Microsoft.Insights/components",
        "apiVersion": "2020-02-02",
        "name": "[variables('applicationInsightsName')]",
        "location": "[parameters('location')]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2022-03-01",
        "name": "[parameters('functionAppPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "tier": "ElasticPremium",
          "name": "[parameters('functionAppPlanSku')]",
          "size": "[parameters('functionAppPlanSku')]",
          "family": "EP"
        },
        "kind": "elastic",
        "properties": {
          "maximumElasticWorkerCount": 20,
          "reserved": "[variables('isReserved')]"
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-03-01",
        "name": "[parameters('functionAppName')]",
        "location": "[parameters('location')]",
        "kind": "[if(variables('isReserved'), 'functionapp,linux', 'functionapp')]",
        "identity": {
				    "type": "SystemAssigned"
        },
        "properties": {
          "reserved": "[variables('isReserved')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "siteConfig": {
            "functionsRuntimeScaleMonitoringEnabled": true,
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('functionStorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-05-01').keys[0].value)]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~4"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "[parameters('functionWorkerRuntime')]"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~14"
              },
              {
                "name": "WEBSITE_VNET_ROUTE_ALL",
                "value": "1"
              },
              {
                "name": "WEBSITE_CONTENTOVERVNET",
                "value": "1"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "https://github.com/anildwarepo/Purview-ADB-Lineage-Solution-Accelerator/releases/download/v2.2.2/FunctionZip.zip"
              },
              {
                  "name": "EventHubName",
                  "value": "[variables('openlineageNameEventHubName')]"
              },
              {
                  "name": "ListenToMessagesFromEventHub",
                  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('openlineageKeyVaultName'),';SecretName=',variables('EventHubConnectionSecretNameListen'),')')]"
              },
              {
                  "name": "SendMessagesToEventHub",
                  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('openlineageKeyVaultName'),';SecretName=',variables('EventHubConnectionSecretNameSend'),')')]"
              },
              {
                  "name": "EventHubConsumerGroup",
                  "value": "read"
              },
              {
                  "name": "OlToPurviewMappings",
                  "value": "{\"olToPurviewMappings\":[{\"name\":\"wasbs\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"wasbs\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_blob_path\",\"purviewPrefix\":\"https\"},{\"name\":\"wasb\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"wasb\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_blob_path\",\"purviewPrefix\":\"https\"},{\"name\":\"abfsBlobRootFS\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfs\"},{\"op1\":\"nameSpcBodyParts[1]\",\"compare\":\"contains\",\"op2\":\"blob\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"=\",\"op2\":\"\"}],\"qualifiedName\":\"https://{nameSpcConParts[0]}.dfs.{nameSpcConParts[2]}.{nameSpcConParts[3]}.{nameSpcConParts[4]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_filesystem\",\"purviewPrefix\":\"https\"},{\"name\":\"abfsRootFS\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfs\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"=\",\"op2\":\"\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_filesystem\",\"purviewPrefix\":\"https\"},{\"name\":\"abfssBlobRootFS\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfss\"},{\"op1\":\"nameSpcBodyParts[1]\",\"compare\":\"contains\",\"op2\":\"blob\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"=\",\"op2\":\"\"}],\"qualifiedName\":\"https://{nameSpcConParts[0]}.dfs.{nameSpcConParts[2]}.{nameSpcConParts[3]}.{nameSpcConParts[4]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_filesystem\",\"purviewPrefix\":\"https\"},{\"name\":\"abfssRootFS\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfss\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"=\",\"op2\":\"\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_filesystem\",\"purviewPrefix\":\"https\"},{\"name\":\"abfsBlob\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfs\"},{\"op1\":\"nameSpcBodyParts[1]\",\"compare\":\"contains\",\"op2\":\"blob\"}],\"qualifiedName\":\"https://{nameSpcConParts[0]}.dfs.{nameSpcConParts[2]}.{nameSpcConParts[3]}.{nameSpcConParts[4]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_path\",\"purviewPrefix\":\"https\"},{\"name\":\"abfs\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfs\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_path\",\"purviewPrefix\":\"https\"},{\"name\":\"abfssBlob\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfss\"},{\"op1\":\"nameSpcBodyParts[1]\",\"compare\":\"contains\",\"op2\":\"blob\"}],\"qualifiedName\":\"https://{nameSpcConParts[0]}.dfs.{nameSpcConParts[2]}.{nameSpcConParts[3]}.{nameSpcConParts[4]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_path\",\"purviewPrefix\":\"https\"},{\"name\":\"abfss\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"abfss\"}],\"qualifiedName\":\"https://{nameSpcBodyParts[1]}/{nameSpcBodyParts[0]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_datalake_gen2_path\",\"purviewPrefix\":\"https\"},{\"name\":\"synapseSqlNonDbo\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"sqlserver\"},{\"op1\":\"nameSpcBodyParts[0]\",\"compare\":\"contains\",\"op2\":\"azuresynapse\"},{\"op1\":\"nameGroups[0].parts\",\"compare\":\">\",\"op2\":\"1\"}],\"qualifiedName\":\"mssql://{nameSpcBodyParts[0]}/{nameSpcNameVals['database']}/{nameGroups[0].parts[0]}/{nameGroups[0].parts[1]}\",\"purviewDataType\":\"azure_synapse_dedicated_sql_table\",\"purviewPrefix\":\"mssql\"},{\"name\":\"synapseSql\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"sqlserver\"},{\"op1\":\"nameSpcBodyParts[0]\",\"compare\":\"contains\",\"op2\":\"azuresynapse\"}],\"qualifiedName\":\"mssql://{nameSpcBodyParts[0]}/{nameSpcNameVals['database']}/dbo/{nameGroups[0].parts[0]}\",\"purviewDataType\":\"azure_synapse_dedicated_sql_table\",\"purviewPrefix\":\"mssql\"},{\"name\":\"azureSQLNonDbo\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"sqlserver\"},{\"op1\":\"nameGroups\",\"compare\":\">\",\"op2\":\"1\"}],\"qualifiedName\":\"mssql://{nameSpcBodyParts[0]}/{nameSpcNameVals['database']}/{nameGroups[0]}/{nameGroups[1]}\",\"purviewDataType\":\"azure_sql_table\",\"purviewPrefix\":\"mssql\"},{\"name\":\"azureSQLNonDboNoDotsInNames\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"sqlserver\"},{\"op1\":\"nameGroups[0].parts\",\"compare\":\">\",\"op2\":\"1\"}],\"qualifiedName\":\"mssql://{nameSpcBodyParts[0]}/{nameSpcNameVals['database']}/{nameGroups[0].parts[0]}/{nameGroups[0].parts[1]}\",\"purviewDataType\":\"azure_sql_table\",\"purviewPrefix\":\"mssql\"},{\"name\":\"azureSQL\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"sqlserver\"}],\"qualifiedName\":\"mssql://{nameSpcBodyParts[0]}/{nameSpcNameVals['database']}/dbo/{nameGroups[0]}\",\"purviewDataType\":\"azure_sql_table\",\"purviewPrefix\":\"mssql\"},{\"name\":\"azurePostgresNonPublic\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"postgresql\"},{\"op1\":\"nameGroups[0].parts\",\"compare\":\">\",\"op2\":\"1\"},{\"op1\":\"nameSpcConParts\",\"compare\":\">\",\"op2\":\"4\"},{\"op1\":\"nameSpcConParts[3]\",\"compare\":\"=\",\"op2\":\"azure\"}],\"qualifiedName\":\"postgresql://{nameSpcBodyParts[0]}/{nameSpcBodyParts[2]}/{nameGroups[0].parts[0]}/{nameGroups[0].parts[1]}\",\"purviewDataType\":\"azure_postgresql_table\",\"purviewPrefix\":\"postgresql\"},{\"name\":\"azurePostgres\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"postgresql\"},{\"op1\":\"nameSpcConParts\",\"compare\":\">\",\"op2\":\"4\"},{\"op1\":\"nameSpcConParts[3]\",\"compare\":\"=\",\"op2\":\"azure\"}],\"qualifiedName\":\"postgresql://{nameSpcBodyParts[0]}/{nameSpcBodyParts[2]}/public/{nameGroups[0]}\",\"purviewDataType\":\"azure_postgresql_table\",\"purviewPrefix\":\"postgresql\"},{\"name\":\"postgresNonPublic\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"postgresql\"},{\"op1\":\"nameGroups[0].parts\",\"compare\":\">\",\"op2\":\"1\"}],\"qualifiedName\":\"postgresql://servers/{nameSpcBodyParts[0]}:{nameSpcBodyParts[1]}/dbs/{nameSpcBodyParts[2]}/schemas/{nameGroups[0].parts[0]}/tables/{nameGroups[0].parts[1]}\",\"purviewDataType\":\"postgresql_table\",\"purviewPrefix\":\"postgresql\"},{\"name\":\"postgres\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"postgresql\"}],\"qualifiedName\":\"postgresql://servers/{nameSpcBodyParts[0]}:{nameSpcBodyParts[1]}/dbs/{nameSpcBodyParts[2]}/schemas/public/tables/{nameGroups[0]}\",\"purviewDataType\":\"postgresql_table\",\"purviewPrefix\":\"postgresql\"},{\"name\":\"hiveManagedTableNotDefault\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"dbfs\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"contains\",\"op2\":\"hive/warehouse\"},{\"op1\":\"nameGroups[0].parts\",\"compare\":\">\",\"op2\":\"4\"}],\"qualifiedName\":\"{nameGroups[0].parts[3]}.{nameGroups[0].parts[5]}@{AdbWorkspaceUrl}\",\"purviewDataType\":\"hive_table\",\"purviewPrefix\":\"hive\"},{\"name\":\"hiveManagedTableDefault\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"dbfs\"},{\"op1\":\"nameGroups[0]\",\"compare\":\"contains\",\"op2\":\"hive/warehouse\"}],\"qualifiedName\":\"default.{nameGroups[0].parts[3]}@{AdbWorkspaceUrl}\",\"purviewDataType\":\"hive_table\",\"purviewPrefix\":\"hive\"},{\"name\":\"azureMySql\",\"parserConditions\":[{\"op1\":\"prefix\",\"compare\":\"=\",\"op2\":\"mysql\"}],\"qualifiedName\":\"mysql://{nameSpcBodyParts[0]}/{nameSpcBodyParts[2]}/{nameGroups[0]}\",\"purviewDataType\":\"azure_mysql_table\",\"purviewPrefix\":\"mysql\"}]}"
              },
              {
                  "name": "PurviewAccountName",
                  "value": "[parameters('purviewName')]"
              },
              {
                  "name": "ClientID",
                  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('openlineageKeyVaultName'),';SecretName=',variables('clientidkey'),')')]"
              },
              {
                  "name": "ClientSecret",
                  "value": "[concat('@Microsoft.KeyVault(VaultName=', variables('openlineageKeyVaultName'),';SecretName=',variables('clientsecretkey'),')')]"
              },
              {
                  "name": "TenantId",
                  "value": "[subscription().tenantId]"
              } 
              
            ]
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
          "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Web/sites/networkConfig",
        "apiVersion": "2022-03-01",
        "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
        "properties": {
          "subnetResourceId": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('functionSubnetName'))]",
          "swiftSupported": true
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointFunctionAppName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "MyFunctionAppPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "groupIds": [
                  "sites"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"

        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointFunctionAppName'), 'funcPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId(parameters('functionPrivateDNSZoneResourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('privateFunctionAppDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointFunctionAppName'))]"
          
        ]
      },
      {
            "apiVersion": "2018-01-01-preview",
            "name": "[variables('openlineageEventHubNameSpaceName')]",
            "type": "Microsoft.EventHub/namespaces",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('eventHubsNamespaceSku')]",
                "tier": "[parameters('eventHubsNamespaceSku')]",
                "capacity": "[parameters('eventHubsNamespaceCapacity')]"
            },
            "properties": {
                "zoneRedundant": "[parameters('eventHubsNamespaceZoneRedundant')]"
               
            },
            "resources": [
                {
                "apiVersion": "2017-04-01",
                "name": "[concat(variables('openlineageEventHubNameSpaceName'), '/', variables('openlineageNameEventHubName'))]",
                "type": "Microsoft.EventHub/namespaces/eventhubs",
                "dependsOn": [
                    "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]"
                ],
                "properties": {
                    "messageRetentionInDays": 1,
				"partitionCount": 1
				
                },
                "resources": [
                    {
                    "apiVersion": "2017-04-01",
                    "name": "[parameters('consumerGroupName')]",
                    "type": "consumergroups",
                    "dependsOn": [ "[variables('openlineageNameEventHubName')]" ],
                    "properties": {
                        "userMetadata": "User Metadata goes here"
                    }
                    }
                ]
                }
            ]
        },
        {
            "type": "Microsoft.EventHub/namespaces/networkRuleSets",
            "apiVersion": "2022-01-01-preview",
            "name": "[concat(variables('openlineageEventHubNameSpaceName'), '/default')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]"
            ],
            "properties": {
                "publicNetworkAccess": "Disabled",
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": []
            }
        },
        
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "[parameters('eventHubsNamespacePrivateEndpointName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                {
                    "name": "[parameters('eventHubsNamespacePrivateEndpointName')]",
                    "properties": {
                    "privateLinkServiceId": "[variables('eventHubsNamespaceId')]",
                    "groupIds": [
                        "[variables('eventHubsNamespacePrivateEndpointGroupName')]"
                    ]
                    }
                }
                ],
                "subnet": {
                "id": "[resourceId(parameters('vnetNameRgName'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
                },
                "customDnsConfigs": [
                {
                    "fqdn": "[concat(variables('openlineageEventHubNameSpaceName'), variables('eventHubsPublicDNSZoneForwarder'))]"
                }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[format('{0}/{1}', parameters('eventHubsNamespacePrivateEndpointName'), 'eventhubPrivateDnsZoneGroup')]",
            "properties": {
                "privateDnsZoneConfigs": [
                {
                    "name": "config",
                    "properties": {
                    "privateDnsZoneId": "[resourceId(parameters('eventHubPrivateDNSZoneResourceGroupName'),'Microsoft.Network/privateDnsZones', variables('eventHubsNamespacePrivateDnsZoneName'))]"
                    }
                }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('eventHubsNamespacePrivateEndpointName'))]"
            ]
        },
        {
        "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
        "apiVersion": "2021-11-01",
        "name": "[concat(variables('openlineageEventHubNameSpaceName'), '/ListenMessages')]",
        "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('eventHubsNamespacePrivateEndpointName'))]"
         ],
        
        "properties": {
                "rights": [
                    "Listen"
                ]
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('openlineageEventHubNameSpaceName'), '/SendMessages')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('openlineageEventHubNameSpaceName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', variables('openlineageEventHubNameSpaceName'),'ListenMessages')]"
            ],
            "properties": {
                "rights": [
                    "Send"
                ]
            }
        },
        {
          "type": "Microsoft.KeyVault/vaults",
          "name": "[variables('openlineageKeyVaultName')]",
          "apiVersion": "2019-09-01",
          "location": "[resourceGroup().location]",
          "properties": {
            "sku": {
              "family": "A",
              "name": "Standard"
            },
            "tenantId": "[subscription().tenantId]",
            "accessPolicies": [
              {
                "tenantId": "[subscription().tenantid]",
                "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2020-06-01', 'full').identity.principalId]",
                "permissions": {
                  "keys": [],
                  "secrets": [
                    "get"
                  ],
                  "certificates": []
                }
              }
            ],
                    "networkAcls": {
                        "bypass": "None",
                        "defaultAction": "Allow",
                        "ipRules": []
                        
                    },
                    "publicNetworkAccess": "Disabled",
            "enableSoftDelete": false,
            "enabledForDeployment": false,
            "enabledForDiskEncryption": false,
            "enabledForTemplateDeployment": false
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
          ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-04-01",
            "name": "[parameters('keyvaultPrivateEndpointName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('openlineageKeyVaultName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                {
                    "name": "[parameters('keyvaultPrivateEndpointName')]",
                    "properties": {
                    "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('openlineageKeyVaultName'))]",
                    "groupIds": [
                        "[variables('keyvaultPrivateEndpointGroupName')]"
                    ]
                    }
                }
                ],
                "subnet": {
                "id": "[resourceId(parameters('vnetNameRgName'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
                },
                "customDnsConfigs": [
                {
                    "fqdn": "[concat(variables('openlineageKeyVaultName'), '.vault.azure.net')]"
                }
                ]
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
            "apiVersion": "2022-05-01",
            "name": "[format('{0}/{1}', parameters('keyvaultPrivateEndpointName'), 'keyvaultPrivateDnsZoneGroup')]",
            "properties": {
                "privateDnsZoneConfigs": [
                {
                    "name": "config",
                    "properties": {
                    "privateDnsZoneId": "[resourceId(parameters('keyvaultPrivateDNSZoneResourceGroupName'),'Microsoft.Network/privateDnsZones', variables('keyvaultPrivateDnsZoneName'))]"
                    }
                }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyvaultPrivateEndpointName'))]"
            ]
        }
    ]
  }